# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vWt_01M7en-utYfC9aJWmmIt4z25NVW_
"""

import math
import re
import sympy
from matplotlib import pyplot as plt
#класс фигуры
class Shapes:
  def __init__(self, n_angles, angles, sides):
    #количество введенных углов должно совпадать с заданным количеством углов, а также углы должны быть в интервале от 1 до 359, а стороны должны быть больше 0, иначе не сохранять
    if ((len(angles)==n_angles or len(angles)==n_angles-1) and all(ele>0 for ele in angles) and all(ele<360 for ele in angles) and all(ele>0 for ele in sides) and (max(sides)<sum(sides)-max(sides))) or (n_angles==0 and sides[0]>0):
      self.n_angles=n_angles
      self.angles=angles
      self.sides=sides
    else:
      raise ValueError("Передайте правильные значения")
  def get_perimetr(self):
    #получаем периметр
    return sum(self.sides)
  def picture(self, x, y, len, angle):
    #функция определения координат следующей точки
    endx=x + len*math.cos(math.radians(angle))
    endy=y+len*math.sin(math.radians(angle))
    return endx, endy
  def art(self):
    #создание рисунка фигуры
    if self.n_angles!=0:
      x=0
      y=0
      list_x=[]
      list_y=[]
      list_x.append(x)
      list_y.append(y)
      current_angle=0
      for i in range (self.n_angles):
        current_angle+=180 + self.angles[i]
        x, y=self.picture(x, y, self.sides[i], current_angle)
        list_x.append(x)
        list_y.append(y)
      plt.plot(list_x, list_y, color="red")
      plt.xlabel('x')
      plt.ylabel('y')
      plt.title('Рисунок ' + str(self.n_angles)+'-угольника')
    elif self.n_angles==0:
      #для круга
      radius = self.sides[0]
      circle = plt.Circle((0, 0), radius, color='red', fill=False)
      fig, ax = plt.subplots()
      ax.add_patch(circle)
      ax.set_xlim(-radius - 1, radius + 1)
      ax.set_ylim(-radius - 1, radius + 1)
      plt.title('Рисунок круга')
    plt.axis('equal')
    plt.show()
    print ("Создание фигуры завершено")
#класс создания кругов
class Circle(Shapes):
  def __init__(self, sides, name):
    if sides is None:
      raise ValueError("Радиус должен быть указан")
    if (int(sides[0])>0):
      sid=[int(s) for s in sides]
      super().__init__(0, [360], sid)
      self.name=name
    else:
      raise ValueError("Радиус должен быть больше 0")
  #изменение радиуса
  def set_sides(self, sides):
    if sides is None:
      raise ValueError("Радиус должен быть указан")
    if (int(sides[0])>0):
      sid=[int(s) for s in sides]
      super().__init__(0, [360], sid)
    else:
      raise ValueError("Радиус должен быть больше 0")
  #вывод информации
  def get_info(self):
    print ("Параметры углов:", self.angles[0])
    print ("Параметры сторон:", self.sides[0])
    print ("Периметр:", self.get_perimeter())
    print ("Площадь:", self.get_sq())
    figure=Shapes(0, [360], self.sides)
    figure.art()
  #получение площади
  def get_sq(self):
    pi=sympy.pi
    s=pi*self.sides[0]**2
    return s
  #формула получения периметра для круга
  def get_perimeter(self):
    return self.sides[0]*2*sympy.pi
#создание треугольника
class Triangle(Shapes):
  def __init__(self, n_angles, angles, sides, name):
    arr_angles=re.findall(r'\d+', angles)
    arr_sides=sides.split()
    tokens = []
    #если находим число с корнем, то добавляем в массив сторон в формате sympy.sqrt
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    summary=0
    #создание массива углов
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    #получение третьего угла, если введено только 2
    if c==1:
      angles[index]=str(180-summary)
    #если введено меньше 2 углов
    if c==2 or c==3:
      raise ValueError("Должно быть введено минимум 2 угла")
    angles = [int(angle) for angle in angles]
    sides=[sympy.sympify(s) for s in tokens]
    #инициализация треугольника в случае произвольного четырёхугольника для нахождения площади
    if (name=="Производный четырёхугольник"):
      super().__init__(n_angles, angles, sides)
      self.name=name
    elif (n_angles==3 and (sum(angles)==180) and (len(sides)==3) and (sum(sides)-max(sides)>max(sides))):
      #проверка существования треугольника с заданными параметрами по теореме синусов
      if sides[0]/sympy.simplify(sympy.sin(angles[2]*sympy.pi/180))==sides[1]/sympy.simplify(sympy.sin(angles[0]*sympy.pi/180))==sides[2]/sympy.simplify(sympy.sin(angles[1]*sympy.pi/180)):
        super().__init__(n_angles, angles, sides)
        self.name=name
      else:
        raise ValueError("Такого треугольника не существует")
    else:
      raise ValueError("Введённые данные не являются достаточным набором параметров")
  #изменение углов
  def set_angles(self, angles):
    arr_angles=re.findall(r'\d+', angles)
    summary=0
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    if c==1:
      angles[index]=str(180-summary)
    if c==2 or c==3:
      raise ValueError("Должно быть введено минимум 2 угла")
    angles = [int(angle) for angle in angles]
    if (self.n_angles==3 and (sum(angles)==180)):
      super().__init__(self.n_angles, angles, self.sides)
    else:
      raise ValueError("Такого треугольника не существует")
  #изменение сторон
  def set_sides(self, sides):
    arr_sides=sides.split()
    tokens = []
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    sides=[sympy.sympify(s) for s in tokens]
    if (len(sides)==3) and (sum(sides)-max(sides)>max(sides)):
      if sides[0]/sympy.simplify(sympy.sin(self.angles[2]*sympy.pi/180))==sides[1]/sympy.simplify(sympy.sin(self.angles[0]*sympy.pi/180))==sides[2]/sympy.simplify(sympy.sin(self.angles[1]*sympy.pi/180)):
        super().__init__(self.n_angles, self.angles, sides)
      else:
        raise ValueError("Такого треугольника не существует")
  #вывод основной информации
  def get_info(self):
    print ("Фигура:", self.name)
    print ("Параметры углов:", *self.angles)
    print ("Параметры сторон:", *self.sides)
    figure=Shapes(self.n_angles, self.angles, self.sides)
    print ("Периметр:",figure.get_perimetr())
    self.get_sq()
    figure.art()
  #получение площади треугольника
  def get_sq(self):
    p=sum(self.sides)/2
    #формулой герона
    gerona=sympy.simplify(sympy.sqrt(p*(p-self.sides[0])*(p-self.sides[1])*(p-self.sides[2])))
    #через две стороны и синус угла между ними
    sinus=sympy.simplify(self.sides[0]*self.sides[2]*sympy.sin(sympy.Rational(self.angles[0], 180)*sympy.pi)/2)
    #через высоту
    h=sympy.simplify(self.sides[0]*sympy.sin(sympy.Rational(self.angles[0], 180)*sympy.pi))
    s=self.sides[2]*h/2
    if (self.name!="Производный четырёхугольник"):
      print ("Площади:")
      print ("\tФормулой герона:", gerona)
      print ("\tЧерез 2 стороны и синус угла между ними:", sinus)
      print ("\tЧерез высоту:", s)
    return sinus
#создание четырёхугольника
class Quadrangle(Shapes):
  def __init__(self, n_angles, angles, sides, name):
    arr_angles=re.findall(r'\d+', angles)
    arr_sides=sides.split()
    tokens = []
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    summary=0
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    if c==1:
      angles[index]=str(360-summary)
    if c==2 or c==3 or c==4:
      raise ValueError("Должно быть введено минимум 3 угла")
    angles = [int(angle) for angle in angles]
    sides=[sympy.sympify(s) for s in tokens]
    #базовые условия для создания четырёхугольника
    if (n_angles==4 and (sum(angles)==360) and (len(sides)==4) and (sum(sides)-max(sides)>max(sides))):
      if (angles[0]==angles[2] and angles[1]==angles[3]):
        #если противолежащие углы попарно равны, то и противолежащие стороны должны быть попарно равны
        if (sides[0]==sides[2] and sides[1]==sides[3]):
          super().__init__(n_angles, angles, sides)
          self.name=name
        else:
          raise ValueError("Такого четырёхугольника не существует")
      else:
        super().__init__(n_angles, angles, sides)
        self.name=name
    else:
      raise ValueError("Введённые данные не являются достаточным набором параметров")
  #изменение параметров углов
  def set_angles(self, angles):
    arr_angles=re.findall(r'\d+', angles)
    summary=0
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    if c==1:
      angles[index]=str(360-summary)
    if c==2 or c==3 or c==4:
      raise ValueError("Должно быть введено минимум 3 угла")
    angles = [int(angle) for angle in angles]
    if (self.n_angles==4 and (sum(angles)==360)):
      super().__init__(self.n_angles, angles, self.sides)
    else:
      raise ValueError("Введённые данные не являются достаточным набором параметров")
  #изменение параметров сторон
  def set_sides(self, sides):
    arr_sides=sides.split()
    tokens = []
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    sides=[sympy.sympify(s) for s in tokens]
    if (len(sides)==4) and (sum(sides)-max(sides)>max(sides)):
        super().__init__(self.n_angles, self.angles, sides)
    else:
        raise ValueError("Такого четырёхугольника не существует")
  #вывод информации
  def get_info(self):
    s=self.get_sq()
    print("Фигура:", self.name)
    print ("Параметры углов:", *self.angles)
    print ("Параметры сторон:", *self.sides)
    figure=Shapes(self.n_angles, self.angles, self.sides)
    print ("Периметр:", figure.get_perimetr())
    print ("Площадь:", s)
    print ("Диагонали:")
    dia1=self.get_diagonal(self.sides[0], self.sides[1], self.angles[1])
    dia2=self.get_diagonal(self.sides[1], self.sides[2], self.angles[2])
    print ("\tДиагональ 1:", dia1)
    print ("\tДиагональ 2:", dia2)
    print ("Угол между диагоналями:", self.get_angle_diagonal(dia1, dia2, s))
    figure.art()
  #получение угла между диагоналями через арксинус
  def get_angle_diagonal(self, dia1, dia2, s):
    ssin=2*s/(dia1*dia2)
    return sympy.simplify(sympy.asin(ssin))
  #получение диагонали по теореме косинусов
  def get_diagonal(self, side1, side2, angle):
    s=sympy.simplify(sympy.sqrt(side1**2 + side2**2 - 2*side1*side2*sympy.cos(sympy.Rational(angle, 180)*sympy.pi)))
    return s
  #получение площади
  def get_sq(self):
    #проверка на трапецию
    if self.angles[0]+self.angles[1]==180:
      self.name="Трапеция"
      #проверка на параллелограмм
      if self.angles[0]==self.angles[2]:
        self.name="Параллелограмм"
        romb=self.sides[0]
        #проверка на ромб
        if all(elem==romb for elem in self.sides):
          self.name="Ромб"
          #проверка на квадрат
          if all(item==90 for item in self.angles):
            self.name="Квадрат"
            return romb*romb
          else:
            return romb*romb*sympy.simplify(sympy.sin(sympy.Rational(self.angles[0], 180)*sympy.pi))
        #проверка на прямоугольник
        elif all(ugol==90 for ugol in self.angles):
          self.name="Прямоугольник"
          return self.sides[0]*self.sides[1]
        #если параллелограмм
        else:
          return self.sides[0]*self.sides[1]*sympy.simplify(sympy.sin(sympy.Rational(self.angles[0], 180)*sympy.pi))
      #если трапеция
      else:
        return (self.sides[1]+self.sides[3])*self.sides[0]*sympy.simplify(sympy.sin(sympy.Rational(self.angles[0], 180)*sympy.pi))/2
    #если произвольный четырёхугольник
    else:
      angles1=[self.angles[1], 1, 1]
      angles1=" ".join(map(str, angles1))
      sides1=[self.sides[0], max(self.sides[0], self.sides[1]), self.sides[1]]
      sides1=" ".join(map(str,sides1))
      triangle1=Triangle(3, angles1, sides1, "Производный четырёхугольник")
      angles2=[self.angles[3], 1, 1]
      angles2=" ".join(map(str, angles2))
      sides2=[self.sides[2], max(self.sides[2], self.sides[3]), self.sides[3]]
      sides2=" ".join(map(str, sides2))
      triangle2=Triangle(3, angles2, sides2, "Производный четырёхугольник")
      s1=triangle1.get_sq()
      s2=triangle2.get_sq()
      return (s1+s2)
#произвольный n-угольник
class Nangles(Shapes):
  def __init__(self, n_angles, angles, sides, name):
    arr_angles=re.findall(r'\d+', angles)
    arr_sides=sides.split()
    tokens = []
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    summary=0
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    if c==1:
      angles[index]=str((n_angles-2)*180-summary)
    if c>1:
      raise ValueError("Должно быть введено минимум "+str(n_angles-1) + " углов")
    angles = [int(angle) for angle in angles]
    sides=[sympy.sympify(s) for s in tokens]
    if (sum(angles)==(n_angles-2)*180 and (sum(sides)-max(sides)>max(sides))):
      super().__init__(n_angles, angles, sides)
      self.name=name
    else:
      raise ValueError("Такого " +str(n_angles)+ "-угольника не существует")
  #изменение углов
  def set_angles(self, angles):
    arr_angles=re.findall(r'\d+', angles)
    summary=0
    for i in range (len(arr_angles)):
      summary+=int(arr_angles[i])
    angles=list(angles.split())
    c=0
    index=0
    for item in angles:
      if item=="-":
        c+=1
        index=angles.index(item)
    if c==1:
      angles[index]=str((self.n_angles-2)*180-summary)
    if c>1:
      raise ValueError("Должно быть введено минимум " + str(self.n_angles-1) +" углов")
    angles = [int(angle) for angle in angles]
    if (sum(angles)==(self.n_angles-2)*180):
      super().__init__(self.n_angles, angles, self.sides)
    else:
      raise ValueError("Такого " +str(self.n_angles) + "-угольника не существует")
  #изменение сторон
  def set_sides(self, sides):
    arr_sides=sides.split()
    tokens = []
    for token in arr_sides:
      if token.startswith('sqrt('):
        tokens.append(sympy.sqrt(sympy.sympify(token[5:-1])))
      else:
        tokens.append(sympy.sympify(token))
    sides=[sympy.sympify(s) for s in tokens]
    if (sum(sides)-max(sides)>max(sides)):
        super().__init__(self.n_angles, self.angles, sides)
    else:
        raise ValueError("Такого "+str(self.n_angles) + "-угольника не существует")
  #нахождение площади
  def get_sq(self):
    side=self.sides[0]
    angle=self.angles[0]
    if all(ele==side for ele in self.sides) and all(elem==angle for elem in self.angles):
      ugol=sympy.Rational(180, self.n_angles)
      s=sympy.simplify((side**2*self.n_angles)/(4*sympy.tan(sympy.Rational(ugol, 180)*sympy.pi)))
      self.name="Правильный " + str(self.n_angles) + "-угольник"
      return s
    else:
      raise ValueError("Невозможно найти площадь")
  #вывод информации
  def get_info(self):
    s=self.get_sq()
    print("Фигура:", self.name)
    print ("Параметры углов:", *self.angles)
    print ("Параметры сторон:", *self.sides)
    figure=Shapes(self.n_angles, self.angles, self.sides)
    print ("Периметр:", figure.get_perimetr())
    print ("Площадь:", s)
    figure.art()
while(1):
  #пока не создаст удачно фигуры
  try:
    n=int(input("Введите количество углов: "))
    if n!=0:
      arr_angles=input("Введите углы: ")
    arr_sides=input("Введите стороны: ")
    if n==0:
      cir=Circle(arr_sides,"Круг")
      cir.get_info()
      #создаем новый круг столько, сколько хочет пользователь
      while (1):
        a=input("Хотите ли ввести новый круг? (да/нет) ")
        if (a=="да"):
          a_sides=input("Введите новый радиус: ")
          cir.set_sides(a_sides)
          cir.get_info()
        elif (a=="нет"):
          break
        else:
          print("Пожалуйста, введите да или нет")
    elif n==3:
      tria=Triangle(3, arr_angles, arr_sides, "Треугольник")
      tria.get_info()
      while (1):
        a=input("Хотите ли вы создать другой треугольник? (да/нет) ")
        if (a=="да"):
          a_angles=input("Введите новые углы: ")
          a_sides=input("Введите новые стороны: ")
          tria.set_angles(a_angles)
          tria.set_sides(a_sides)
          tria.get_info()
        elif (a=="нет"):
          break
        else:
          print("Пожалуйста, введите да или нет")
    elif n==4:
      qa=Quadrangle(4,arr_angles, arr_sides, "Производный четырёхугольник")
      qa.get_info()
      while (1):
        a=input("Хотите ли вы создать другой четырёхугольник? (да/нет) ")
        if (a=="да"):
          a_angles=input("Введите новые углы: ")
          a_sides=input("Введите новые стороны: ")
          qa.set_angles(a_angles)
          qa.set_sides(a_sides)
          qa.get_info()
        elif (a=="нет"):
          break
        else:
          print("Пожалуйста, введите да или нет")
    else:
      nangel=Nangles(n, arr_angles, arr_sides, "Произвольный" + str(n) + "-угольник")
      nangel.get_info()
      while (1):
        a=input("Хотите ли вы создать другой " + str(n) + "-угольник? (да/нет) ")
        if (a=="да"):
          nn_angles=input("Введите новые углы: ")
          nn_sides=input("Введите новые стороны: ")
          nangel.set_angles(nn_angles)
          nangel.set_sides(nn_sides)
          nangel.get_info()
        elif (a=="нет"):
          break
        else:
          print("Пожалуйста, введите да или нет")
    break
  #если не удалось удачно создать фигуру
  except ValueError as e:
    print (f"Ошибка: {e}")
    a=input("Хотите ли вы создать другую фигуру (да/нет)? ")
    if (a=="да"):
      continue
    elif (a=="нет"):
      break
    else:
      print ("Пожалуйста, введите да или нет")